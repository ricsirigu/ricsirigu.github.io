{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/blog/blog-post-13/","result":{"data":{"markdownRemark":{"html":"<p>How to get the total count of results with DynamoDB and GraphQL in order to paginate my results?</p>\n<!--more-->   \n<p>Many engineers using AWS Amplify are <a href=\"https://github.com/aws-amplify/amplify-js/issues/2901\">facing</a>{:target=\"<em>blank\"} the <a href=\"https://stackoverflow.com/questions/55537058/get-count-from-dynamodb-resolver\">same</a>{:target=\"</em>blank\"} <a href=\"https://github.com/aws-amplify/amplify-js/issues/2901\">issue</a>{:target=\"_blank\"}.</p>\n<p>If you are about to bang your head against the wall, stop. </p>\n<p>I'll show you how to do it.</p>\n<p>From the <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Query.html#Query.Count\">DynamoDB documentation</a>{:target=\"_blank\"}:</p>\n<pre><code>the Query response contains the following elements:\n\nScannedCount — The number of items that matched the key condition expression before a filter expression (if present) was applied.\n\nCount — The number of items that remain after a filter expression (if present) was applied.\n</code></pre>\n<p>The problem is that the automatically generated queries from Amplify don't have those fields.</p>\n<p>This is an example of a query that lists users:</p>\n<pre><code>export const listUsers = /* GraphQL */ `\n  query ListUsers(\n    $filter: ModelAlertFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listUsers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        status\n        groupCanAccess\n        owner\n        ...\n      }\n      nextToken\n    }\n  }\n`;\n</code></pre>\n<p>And so, there will be no <code>scannedCount</code> and <code>count</code> in the result.</p>\n<p>To make them magically appear, open your <code>amplify/backend/api/deepboard/build/schema.graphql</code> </p>\n<p>and look for the definition of the <code>type Query</code>.</p>\n<p>You'll find somthing like this </p>\n<pre><code>type Query {\n  getUser(id: ID!): User\n  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection\n  ...\n}\n</code></pre>\n<p>a <code>listUsers</code> field that returns a type of <code>ModelUserConnection</code>, that is the result type that we want to edit.</p>\n<p>Copy the type <code>ModelUserConnection</code> in your <code>amplify/backend/api/&#x3C;project-name>/schema.graphql</code> to override it.</p>\n<pre><code>type ModelUserConnection {\n  items: [User]\n  nextToken: String\n}\n</code></pre>\n<p>Add the <code>scannedCount</code> and <code>count</code> fields.</p>\n<pre><code>type ModelUserConnection {\n  items: [User]\n  nextToken: String\n  scannedCount: Int\n  count: Int\n}\n</code></pre>\n<p>Now type <code>amplify push</code> and enjoy. </p>\n<p>Now the query will return the scannedCount and count and you can happily paginate your results.</p>\n<p>Remember that if the size of the Query result set is larger than 1 MB, <code>scannedCount</code> and <code>count</code> represent only a partial count of the total items. You need to perform multiple Query operations to retrieve all the results.</p>\n<p>Keep Learning<br>\nUntil next time</p>","frontmatter":{"title":"How to count the number of results with AWS Amplify DynamoDB and GraphQL","date":"Dec 10, 2019"}}},"pageContext":{"slug":"/blog/blog-post-13/","previous":{"fields":{"slug":"/blog/how-to-connect-multiple-docker-containers/"},"frontmatter":{"title":"Quick recipe: How to connect multiple Docker containers"}},"next":null}}}