{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/blog/lift-framework-rest-apis-authentication-with-jwt/","result":{"data":{"markdownRemark":{"id":"03601602-5b7d-5d81-b739-e7baeee9f6fc","excerpt":"You have a RESTful api as a source of data for your mobile applications or a reactjs/angular/vue/whatever frontend, and you, as a security conscious softwareâ€¦","html":"<article class=\"prose lg:prose-lg xl:prose-xl\">\n<p>You have a RESTful api as a source of data for your mobile applications or a reactjs/angular/vue/whatever frontend, and you, as a security conscious software engineer (or a good student that follows <a href=\"https://github.com/shieldfy/API-Security-Checklist\" target=\"_blank\" rel=\"noopener noreferrer\">these security guidelines</a> ) want to protect your precious endpoints from unwanted eyes.</p>\n<h2>What is JWT</h2>\n<p>As explained in <a href=\"https://jwt.io/introduction/\" target=\"_blank\" rel=\"noopener noreferrer\">the official JWT page</a> or in the <a href=\"https://tools.ietf.org/html/rfc7519\" target=\"_blank\" rel=\"noopener noreferrer\">RFC 7519</a>:</p>\n<p><em>JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA.</em></p>\n<p>In brief, it's a string with the following format</p>\n<p><code class=\"language-text\">header.payload.signature</code></p>\n<p>where each part is <strong>base64url</strong> encoded, interactive examples <a href=\"https://jwt.io/#debugger\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.</p>\n<p>Just rember that the payload is not encrypted and <strong>ANYONE</strong> that has access to the token can see what's inside. An attacker can inspect the payload but he can't tamper with it because it's signed with a <strong>STRONG</strong> key that you generated.</p>\n<p>My library of choice to encode/decode/verify JWT with Scala is <a href=\"http://pauldijou.fr/jwt-scala\" target=\"_blank\" rel=\"noopener noreferrer\">jwt-scala</a></p>\n<h2>Building an interceptor with Lift</h2>\n<p>The api we want to protect is the following</p>\n<p><code class=\"language-text\">GET /api/secured/treasure</code></p>\n<p>I would like to have a middleware (in Express.js terms, a decorator if you are a Python lover) that intercepts every request that points to a protected resource, decode the JWT inside of the http request's <strong>Authorization</strong> header and allow or deny access to the forementioned resource according to the token validity.</p>\n<p><strong>How can we do this with Lift?</strong></p>\n<p>The <code class=\"language-text\">LiftRules</code> object is where most of the configuration parameters that handles HTTP request and responses reside.\nIt gets initialized during boot.</p>\n<p>As the <a href=\"https://exploring.liftweb.net/master/index-9.html#toc-Section-9.9\" target=\"_blank\" rel=\"noopener noreferrer\">documentation says</a>, this is the place where we tell Lift what resource needs to be protected and how.</p>\n<p>Lift doesn't support Token based authentication out of the box, but thanks to its extensibility we can easily write our own JWT authenticator.</p>\n<p>Let the fun begin!</p>\n<p>Let's start with informing Lift that out precious API needs to be protected.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> protectedRoutes<span class=\"token operator\">:</span> LiftRules<span class=\"token punctuation\">.</span>HttpAuthProtectedResourcePF <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Empty means that this resource is protected by authentication but no authorization is performed</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"api\"</span> <span class=\"token operator\">::</span> <span class=\"token string\">\"secured\"</span> <span class=\"token operator\">::</span> <span class=\"token string\">\"treasure\"</span> <span class=\"token operator\">::</span> Nil JsonGet _ <span class=\"token keyword\">=></span> Empty\n<span class=\"token punctuation\">}</span>\nLiftRules<span class=\"token punctuation\">.</span>httpAuthProtectedResource<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>protectedRoutes<span class=\"token punctuation\">)</span>\nLiftRules<span class=\"token punctuation\">.</span>authentication <span class=\"token operator\">=</span> JWTAuthentication<span class=\"token punctuation\">(</span><span class=\"token string\">\"api\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span>\n    <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For each <code class=\"language-text\">HttpAuthProtectedResourcePF</code> inside <code class=\"language-text\">LiftRules.httpAuthProtectedResource</code>, Lift will use the authentication mechanism defined with <code class=\"language-text\">LiftRules.authentication</code>.<br>\nIn our case <code class=\"language-text\">JWTAuthentication</code>.</p>\n<p>Let's write it.</p>\n<p>First thing to do, in order to tell Lift we are writing an HTTP authentication method, we must extend the <code class=\"language-text\">HttpAuthentication</code> trait</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">trait</span> HttpAuthentication <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> header<span class=\"token punctuation\">(</span>r<span class=\"token operator\">:</span> Req<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Box<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">def</span> verified_<span class=\"token operator\">?</span> <span class=\"token operator\">:</span> PartialFunction<span class=\"token punctuation\">[</span>Req<span class=\"token punctuation\">,</span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">def</span> realm<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token keyword\">def</span> unauthorizedResponse<span class=\"token operator\">:</span> UnauthorizedResponse <span class=\"token operator\">=</span> UnauthorizedResponse<span class=\"token punctuation\">(</span>realm<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">def</span> shutDown <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and override the <code class=\"language-text\">verified_?</code> partial function, that is the bouncer of our API.</p>\n<p>Inside the <code class=\"language-text\">verified_?</code> partial function we need to take the token from the request's <code class=\"language-text\">Authorization</code> header, verify it and decode its payload, if we are interested in the claims inside its stomach.<br>\nIf <code class=\"language-text\">verified_?</code> returns <code class=\"language-text\">true</code>, the client is allowed, otherwise a 401 UnauthorizedResponse will be returned.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> JWTAuthentication<span class=\"token punctuation\">(</span>realmName<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>func<span class=\"token operator\">:</span> PartialFunction<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> Req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> HttpAuthentication <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">//If the credentials functions returns a Full box, func gets executed</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> verified_<span class=\"token operator\">?</span> <span class=\"token operator\">:</span> PartialFunction<span class=\"token punctuation\">[</span>Req<span class=\"token punctuation\">,</span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span>\n        credentials<span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span> <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> Full<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> func<span class=\"token punctuation\">.</span>isDefinedAt<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span>\n            jwtClaims<span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">(</span>Option<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            func<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> _ <span class=\"token keyword\">=></span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">credentials</code> is a simple function that decodes the JWT with your secret and a given algorithm, you can find the full code at the end of this post.</p>\n<p>Now we have an interceptor that can extract a JWT from each request that points to a protected resource, but how can we examine the claims that are inside the token without redoing the work that our interceptor has already done? </p>\n<p>It's simple, we can stick our decoded payload in a <code class=\"language-text\">TransientRequestVar</code>, a request variable that has the scope of the current HTTP request.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> jwtClaims <span class=\"token keyword\">extends</span> TransientRequestVar<span class=\"token punctuation\">[</span>Option<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>Empty<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now in our api we can access jwtClaims and analyze the JWT payload.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> SecuredApi <span class=\"token keyword\">extends</span> RestHelper<span class=\"token punctuation\">{</span>\n  serve<span class=\"token punctuation\">(</span><span class=\"token string\">\"api\"</span> <span class=\"token operator\">/</span> <span class=\"token string\">\"secured\"</span> prefix <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">case</span> <span class=\"token string\">\"treasure\"</span> <span class=\"token operator\">::</span> Nil JsonGet _ <span class=\"token keyword\">=></span>\n       <span class=\"token comment\">//Here you can access jwtClaims TransientRequestVar</span>\n       JString<span class=\"token punctuation\">(</span><span class=\"token string\">\"My Treasure\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This example is purposefully simple in order to make you better understand the general architecture, a better approach would be deserialize our claims and stick inside the TransientRequestVar not a String but a more suitable and easier to manage data type.</p>\n<p>Here below, for your enjoyment, the full source code.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> SecuredApi <span class=\"token keyword\">extends</span> RestHelper<span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">def</span> init<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">def</span> protectedRoutes<span class=\"token operator\">:</span> LiftRules<span class=\"token punctuation\">.</span>HttpAuthProtectedResourcePF <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//Empty means that this resource is protected by authentication but no authorization is performed</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"api\"</span> <span class=\"token operator\">::</span> <span class=\"token string\">\"secured\"</span> <span class=\"token operator\">::</span> <span class=\"token string\">\"treasure\"</span> <span class=\"token operator\">::</span> Nil JsonGet _ <span class=\"token keyword\">=></span> Empty\n    <span class=\"token punctuation\">}</span>\n    LiftRules<span class=\"token punctuation\">.</span>httpAuthProtectedResource<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>protectedRoutes<span class=\"token punctuation\">)</span>\n    LiftRules<span class=\"token punctuation\">.</span>authentication <span class=\"token operator\">=</span> JWTAuthentication<span class=\"token punctuation\">(</span><span class=\"token string\">\"api\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span>\n        <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n    LiftRules<span class=\"token punctuation\">.</span>statelessDispatch<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>SecuredApi<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n\n  serve<span class=\"token punctuation\">(</span><span class=\"token string\">\"api\"</span> <span class=\"token operator\">/</span> <span class=\"token string\">\"secured\"</span> prefix <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">case</span> <span class=\"token string\">\"treasure\"</span> <span class=\"token operator\">::</span> Nil JsonGet _ <span class=\"token keyword\">=></span>\n       <span class=\"token comment\">//Here you can access jwtClaims TransientRequestVar</span>\n       JString<span class=\"token punctuation\">(</span><span class=\"token string\">\"My Treasure\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> jwtClaims <span class=\"token keyword\">extends</span> TransientRequestVar<span class=\"token punctuation\">[</span>Option<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>Empty<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> JWTAuthentication<span class=\"token punctuation\">(</span>realmName<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>func<span class=\"token operator\">:</span> PartialFunction<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> Req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> HttpAuthentication <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">//Take the JWT from the Authorization header</span>\n  <span class=\"token keyword\">def</span> credentials<span class=\"token punctuation\">(</span>r<span class=\"token operator\">:</span> Req<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Box<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n    header<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">{</span> token <span class=\"token keyword\">=></span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Jwt<span class=\"token punctuation\">.</span>isValid<span class=\"token punctuation\">(</span>sanitizeHeader<span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> secret<span class=\"token punctuation\">,</span> Seq<span class=\"token punctuation\">(</span>JwtAlgorithm<span class=\"token punctuation\">.</span>HS256<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Jwt<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>sanitizeHeader<span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> secret<span class=\"token punctuation\">,</span> Seq<span class=\"token punctuation\">(</span>JwtAlgorithm<span class=\"token punctuation\">.</span>HS256<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">case</span> Success<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> Full<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">case</span> Failure<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> Empty\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        Empty\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//If the credentials functions returns a Full box, func gets executed</span>\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> verified_<span class=\"token operator\">?</span> <span class=\"token operator\">:</span> PartialFunction<span class=\"token punctuation\">[</span>Req<span class=\"token punctuation\">,</span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span>\n      credentials<span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span> <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> Full<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> func<span class=\"token punctuation\">.</span>isDefinedAt<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span>\n          jwtClaims<span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">(</span>Option<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          func<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> _ <span class=\"token keyword\">=></span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> realm<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> realmName\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Keep Learning<br>\nUntil next time <img alt=\"emoji-sunglasses\" data-icon=\"emoji-sunglasses\" style=\"display: inline; margin: 0; margin-top: 1px; top: 5px; width: 25px\" src=\"data:image/png;base64, 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\" title=\"emoji-sunglasses\"></p>\n</article>","frontmatter":{"title":"How to protect your RESTful APIs in Lift with JWT","description":"How to add authentication to your REST APIs","date":"Jul 21, 2017","tags":["jwt","security","authentication"],"cover":{"childImageSharp":{"resize":{"src":"/static/23df30569a73244528f464073936d6a0/0ff54/cover.jpg","width":1200,"height":675}}}},"fields":{"slug":"/blog/lift-framework-rest-apis-authentication-with-jwt/"}}},"pageContext":{"slug":"/blog/lift-framework-rest-apis-authentication-with-jwt/","previous":{"fields":{"slug":"/blog/type-classes-in-scala-a-practical-example/"},"frontmatter":{"title":"Type Classes in Scala: A Practical Example"}},"next":{"fields":{"slug":"/blog/best-programming-resources-of-2017/"},"frontmatter":{"title":"The best programming resources I read in 2017"}}}},"staticQueryHashes":["3614791461","3649515864","567514351"]}