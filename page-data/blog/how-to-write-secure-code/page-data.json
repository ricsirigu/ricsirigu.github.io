{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/blog/how-to-write-secure-code/","result":{"data":{"markdownRemark":{"id":"8a81add5-1e7e-510d-8507-c3a50299219c","excerpt":"We all know that writing bug-free code is hard. That writing readable code is hard. That writing testable code is also hard. Well, I could keep going but youâ€¦","html":"<article class=\"prose lg:prose-lg xl:prose-xl\">\n<p>We all know that writing bug-free code is hard.<br>\nThat writing readable code is hard.<br>\nThat writing testable code is also hard.<br>\nWell, I could keep going but you get it.<br>\nWriting code that is also secure is even harder.</p>\n<p>What can we do about it?</p>\n<ul>\n<li>Apply threat modeling as if there is no tomorrow</li>\n<li>Research for all <strong>known</strong> vulnerabilities and apply the suggested countermeasures</li>\n<li>Apply all the OWASP guidelines, in particular the <a href=\"https://owasp.org/www-project-proactive-controls/\" target=\"_blank\" rel=\"noopener noreferrer\">Top 10 Proactive Controls</a></li>\n</ul>\n<p>Although these practices are strongly recommended, there is also another point to consider, which is often overlooked.</p>\n<p><strong>A strong Design</strong></p>\n<p>Let's suppose to have a simple domain object that represents a Developer in a typical web application with the Developer's username displayed in a public profile page.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Developer<span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span> username<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">Developer</code> is quite simple, it holds an <code class=\"language-text\">id</code> and its <code class=\"language-text\">username</code>.</p>\n<p>If we take a closer look at the code we can identify at least one security vulnerability.<br>\nCan you figure out where?<br>\n(Here a knowledge of the <a href=\"https://owasp.org/www-project-proactive-controls/\" target=\"_blank\" rel=\"noopener noreferrer\">most common web vulnerabilities is needeed</a>)</p>\n<p>The  <code class=\"language-text\">username</code> is displayed in a public page and is Developer-controlled.</p>\n<p>A malicious actor could name itself something along the lines of <code class=\"language-text\">&#39;&gt;&lt;script&gt;alert(&#39;I&#39;m an evil script!&#39;)&lt;/script&gt;</code>\nand manage to execute JavaScript code on the visitor's browser.<br>\n<a href=\"https://portswigger.net/web-security/cross-site-scripting\" target=\"_blank\" rel=\"noopener noreferrer\">This vulnerability is called Cross Site Scripting (<em>XSS</em>)</a>.<br>\nOr he can even store its name as a malicious SQL query and perform <a href=\"https://portswigger.net/web-security/sql-injection/blind\" target=\"_blank\" rel=\"noopener noreferrer\">a blind <em>SQL injection</em></a> attack.</p>\n<p>These are two injection vulnerabilities that affect two different layers.\nThe presentation layer in the case of <em>XSS</em> and the persistence layer in the case of SQL injection.<br>\nWith the traditional approach we usually do one or more of the following:  </p>\n<ul>\n<li>To mitigate the first security vulnerability (<em>XSS</em>) we could encode the <code class=\"language-text\">username</code> when displaying it in the profile page, to strip out all the dangerous characters by hand or by using a modern JavaScript framework being careful not to disable the encoding for whatever reason.</li>\n<li>To mitigate the second security vulnerability we could add a filter to strip out everything except all the allowed non-dangerous characters.</li>\n</ul>\n<p>We could even employ a web application firewall that manages this filtering automagically.</p>\n<p>But these approaches, if not rigorously applied, tends to provide a false sense of security.</p>\n<p>Moreover if a new attack vector is discovered, for which the above mitigations are not suitable, we are in trouble.</p>\n<p>An alternative method is a variation of the <a href=\"https://en.wikipedia.org/wiki/Rule_of_least_power\" target=\"_blank\" rel=\"noopener noreferrer\">\"Rule of least power\"</a>.<br>\nWhy representing the <code class=\"language-text\">username</code> as a whole <code class=\"language-text\">String</code> when we don't need all the UTF-16 charset (in this case)?</p>\n<h3>Secure By Design</h3>\n<p>What if our <code class=\"language-text\">Developer</code> was represented in the following way?</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> refinements <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span> Id <span class=\"token operator\">=</span> <span class=\"token builtin\">Long</span> Refined Positive\n    <span class=\"token keyword\">type</span> Username <span class=\"token operator\">=</span> <span class=\"token builtin\">String</span> Refined AllOf<span class=\"token punctuation\">[</span>\n        NonEmpty\n        MatchesRegex<span class=\"token punctuation\">[</span><span class=\"token string\">\"[A-Za-z0-9_]+\"</span><span class=\"token punctuation\">]</span>\n        MinSize<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n        MaxSize <span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Developer<span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> Id<span class=\"token punctuation\">,</span> username<span class=\"token operator\">:</span> Username<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here I'm using Scala with <a href=\"https://github.com/fthomas/refined\" target=\"_blank\" rel=\"noopener noreferrer\">refined</a>, but the same concepts apply to all the other programming languages.  </p>\n<p><strong>We need to validate our domain model as strictly as possible.</strong></p>\n<p>In our example the username can only be a non-empty String with a length between 5 and 20 characters and can only contain alfanumeric characters plus the underscore.\nThis makes the aforementioned attacks very unlikely to happen.</p>\n<p>If we complement this design with the traditional approach previously explained and explicit security awareness, our code becomes even more secure.</p>\n<p>Go and try it out!  </p>\n<p>Keep Learning.<br>\nUntil next time <img alt=\"emoji-sunglasses\" data-icon=\"emoji-sunglasses\" style=\"display: inline; margin: 0; margin-top: 1px; top: 5px; width: 25px\" src=\"data:image/png;base64, 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\" title=\"emoji-sunglasses\"></p>\n</article>","frontmatter":{"title":"How to write secure code","description":"Maybe you do not need to be a security expert, do you?","date":"Feb 13, 2021","tags":["security","programming","secure coding","secure coding best practices"],"cover":{"childImageSharp":{"resize":{"src":"/static/bbd5adee8f5e82c27cf635998077bd94/0ff54/cover.jpg","width":1200,"height":675}}}},"fields":{"slug":"/blog/how-to-write-secure-code/"}}},"pageContext":{"slug":"/blog/how-to-write-secure-code/","previous":{"fields":{"slug":"/blog/aws-amplify-dynamodb-total-count-graphql-queries/"},"frontmatter":{"title":"How to count the number of results with AWS Amplify DynamoDB and GraphQL"}},"next":null}},"staticQueryHashes":["3614791461","3649515864","567514351"]}