{
    "componentChunkName": "component---src-templates-blog-post-index-tsx",
    "path": "/blog/type-classes-in-scala-a-practical-example/",
    "result": {"data":{"markdownRemark":{"id":"4c772ae3-b420-5970-b646-63703e052a90","excerpt":"Say you want to extend a particular class (type) with some new functionality but you can't access the source code..\nor perhaps you can but you don't want to useâ€¦","html":"<article class=\"prose lg:prose-lg xl:prose-lg\">\n<p>Say you want to extend a particular class (type) with some new functionality but you can't access the source code..\nor perhaps you can but you don't want to use inheritance and subtype polimorphism..</p>\n<p>Let's suppose you have the following type that represents an uploaded picture</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Picture<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> uri<span class=\"token operator\">:</span> Uri<span class=\"token punctuation\">)</span>     </code></pre></div>\n<p>and you want to return the json representation of it to your clients.<br>\nYou can do something like this</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">\n<span class=\"token keyword\">trait</span> Jsonable<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> toJson<span class=\"token operator\">:</span> JValue\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Picture<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> uri<span class=\"token operator\">:</span> Uri<span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Jsonable<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> toJson<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> JValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//implementation omitted</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>    </code></pre></div>\n<p>Then you realize that you need another type, Attachment.<br>\nNo problem, let's add another case class to the mix</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Attachment<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> uri<span class=\"token operator\">:</span> Uri<span class=\"token punctuation\">,</span> visibile<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Jsonable<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> toJson<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> JValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//implementation omitted</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>    </code></pre></div>\n<p>Now you can serialize to json all of your case classes that extends the <em>Jsonable</em> trait</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> picture<span class=\"token operator\">:</span> Jsonable <span class=\"token operator\">=</span> Picture<span class=\"token punctuation\">(</span><span class=\"token string\">\"scalaitaly.png\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> Uri<span class=\"token punctuation\">(</span><span class=\"token string\">\"aws.s3.scalaitaly.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> attachment<span class=\"token operator\">:</span> Jsonable <span class=\"token operator\">=</span> Attachment<span class=\"token punctuation\">(</span><span class=\"token string\">\"speakers.pdf\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> Uri<span class=\"token punctuation\">(</span><span class=\"token string\">\"aws.s3.speakers.pdf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\nprintln<span class=\"token punctuation\">(</span>picture<span class=\"token punctuation\">.</span>toJson<span class=\"token punctuation\">)</span>\nprintln<span class=\"token punctuation\">(</span>attachment<span class=\"token punctuation\">.</span>toJson<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This all works, but what if you don't have access to the source code of <code class=\"language-text\">Picture</code> or <code class=\"language-text\">Attachment</code>?\nIs there another way? Maybe more <strong>Scala-ish</strong>?</p>\n<h2>Type Classes to the rescue</h2>\n<p>First and foremost. A Type Class has nothing to do with the concept of class in a typical Object Oriented programming language.<br>\nIt's a concept from the Haskell world and it's used to achieve <strong>ad-hoc polymorphism</strong></p>\n<h3>Type Classes in practice</h3>\n<p>The first thing to do is define the behavior that you want your classes to have, in this case we want our case classes to be serializable in the json format.<br>\nThat's the Type Class.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">trait</span> JsonWriter<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> toJson<span class=\"token punctuation\">(</span>in<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> JValue\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>then we need the Type Class instances for each concrete class we have</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">implicit</span> <span class=\"token keyword\">val</span> pictureJsonWriter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> JsonWriter<span class=\"token punctuation\">[</span>Picture<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> toJson<span class=\"token punctuation\">(</span>in<span class=\"token operator\">:</span> Picture<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> JValue <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span>  \n  \n<span class=\"token keyword\">implicit</span> <span class=\"token keyword\">val</span> attachmentJsonWriter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> JsonWriter<span class=\"token punctuation\">[</span>Attachment<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> toJson<span class=\"token punctuation\">(</span>in<span class=\"token operator\">:</span> Attachment<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> JValue <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>we mark them <code class=\"language-text\">implicit</code> because we want the compiler to be able to inject the correct implementation into the interface the we are defining next</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> jsonOf<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>in<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">implicit</span> jsonWriter<span class=\"token operator\">:</span> JsonWriter<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span>\n  jsonWriter<span class=\"token punctuation\">.</span>toJson<span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can play with the code below</p>\n<iframe height=\"300\" frameborder=\"0\" style=\"width: 100%; overflow: hidden;\" src=\"https://embed.scalafiddle.io/embed?sfid=eRUVeR8/5&layout=v80\"></iframe>\n<p>Wouldn't it better if the method <code class=\"language-text\">toJson</code> would be a part of the classes in our domain model but without touching them?\nAdding the functionality magically from the outside.</p>\n<p>I would like to write</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">println<span class=\"token punctuation\">(</span>Picture<span class=\"token punctuation\">(</span><span class=\"token string\">\"mypic\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mypicurl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toJson<span class=\"token punctuation\">)</span>\nprintln<span class=\"token punctuation\">(</span>Attachment<span class=\"token punctuation\">(</span><span class=\"token string\">\"myattachment\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"myurl\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toJson<span class=\"token punctuation\">)</span></code></pre></div>\n<p>As if <code class=\"language-text\">toJson</code> were a built-in method of the class.</p>\n<p>Yes, I know that, for example in Ruby, Javascript you can do monkey patching, but we are talking about compile time transformation, not runtime.</p>\n<p>In Scala you can achieve that using <strong>Implicit Classes</strong></p>\n<p>You just need to write</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">implicit</span> <span class=\"token keyword\">class</span> JsonSerializer<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> toJson<span class=\"token punctuation\">(</span><span class=\"token keyword\">implicit</span> writer<span class=\"token operator\">:</span> JsonWriter<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> \n    writer<span class=\"token punctuation\">.</span>toJson<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This way, when you try to do something like <code class=\"language-text\">Picture(\"mypic\", \"mypicurl\").toJson</code>, the compiler, not finding the <code class=\"language-text\">toJson</code> method in the <code class=\"language-text\">Picture</code> class, tries to convert <code class=\"language-text\">Picture</code> in a <code class=\"language-text\">JsonSerializer</code> that has the method you want.<br>\nThen it passes as <code class=\"language-text\">implicit writer: JsonWriter[T]</code> your Type Class instance that you defined for <code class=\"language-text\">Picture</code> before.</p>\n<p>You can play with the final code below</p>\n<iframe height=\"300\" frameborder=\"0\" style=\"width: 100%; overflow: hidden;\" src=\"https://embed.scalafiddle.io/embed?sfid=V6QiLPI/1&layout=v80\"></iframe>\n<h3>Conclusions</h3>\n<p>With this powerful design pattern we have achieved an impressive result.<br>\nWe can now add new data or new methods to existing types without changing any existing code.</p>\n<p>It's certainly a design pattern that is useful to have in your toolbelt.<br>\nIt's so important that many famous libraries such as <a href=\"https://github.com/milessabin/shapeless\" target=\"_blank\" rel=\"noopener noreferrer\">Shapeless</a>, <a href=\"http://typelevel.org/cats/\" target=\"_blank\" rel=\"noopener noreferrer\">Cats</a>, <a href=\"https://github.com/scalaz/scalaz\" target=\"_blank\" rel=\"noopener noreferrer\">Scalaz</a> and so on, couldn't even exists without this.</p>\n<p>If you want to learn more (yes you want) I suggest you <a href=\"http://underscore.io/books/advanced-scala/\" target=\"_blank\" rel=\"noopener noreferrer\">Advanced Scala</a> by the amazing guys of <a href=\"http://underscore.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Underscore.io</a>.</p>\n<p>Moreover, they recently open sourced all their ebooks, you can download all of them for free <a href=\"http://underscore.io/books/\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>, what are you waiting for?</p>\n<p>Keep Learning<br>\nUntil next time <img alt=\"emoji-sunglasses\" data-icon=\"emoji-sunglasses\" style=\"display: inline; margin: 0; margin-top: 1px; top: 5px; width: 25px\" src=\"data:image/png;base64, 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\" title=\"emoji-sunglasses\"></p>\n</article>","frontmatter":{"title":"Type Classes in Scala: A Practical Example","description":"A guided practical tour of the Type Class pattern ","date":"Jun 02, 2017","tags":["scala","functional programming","type class"],"cover":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/static/6ab2fd4bfe0459a6b8134f0f8248dafd/1e21a/cover.jpg","srcSet":"/static/6ab2fd4bfe0459a6b8134f0f8248dafd/1bf32/cover.jpg 200w,\n/static/6ab2fd4bfe0459a6b8134f0f8248dafd/eee8e/cover.jpg 400w,\n/static/6ab2fd4bfe0459a6b8134f0f8248dafd/1e21a/cover.jpg 800w","sizes":"(min-width: 800px) 800px, 100vw"},"sources":[{"srcSet":"/static/6ab2fd4bfe0459a6b8134f0f8248dafd/b6124/cover.webp 200w,\n/static/6ab2fd4bfe0459a6b8134f0f8248dafd/dff21/cover.webp 400w,\n/static/6ab2fd4bfe0459a6b8134f0f8248dafd/b2a35/cover.webp 800w","type":"image/webp","sizes":"(min-width: 800px) 800px, 100vw"}]},"width":800,"height":450}}}},"fields":{"slug":"/blog/type-classes-in-scala-a-practical-example/"}}},"pageContext":{"slug":"/blog/type-classes-in-scala-a-practical-example/","previous":{"fields":{"slug":"/blog/functional-programming-and-category-theory/"},"frontmatter":{"title":"Functional Programming and Category Theory"}},"next":{"fields":{"slug":"/blog/lift-framework-rest-apis-authentication-with-jwt/"},"frontmatter":{"title":"How to protect your RESTful APIs in Lift with JWT"}}}},
    "staticQueryHashes": ["279501559","3159585216","3649515864"]}