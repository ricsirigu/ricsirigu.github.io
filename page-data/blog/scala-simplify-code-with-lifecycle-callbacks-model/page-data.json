{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/blog/scala-simplify-code-with-lifecycle-callbacks-model/","result":{"data":{"markdownRemark":{"html":"<article class=\"prose lg:prose-lg xl:prose-xl\">\n<p>I was digging around the source code of our project when I noticed spread in many <a href=\"http://exploring.liftweb.net/master/index-5.html\" target=\"_blank\" rel=\"noopener noreferrer\">snippets</a>, code that perform the same action (such as send a push notification to a user) after a particular object gets persisted in the database (for example when a new chat message is sent) or when a change of state happens (a payment for a particular order has been made).</p>\n<p>The tecnhique I'm about to discuss can be applied to many frameworks: <strong>Java</strong> and <a href=\" https://docs.jboss.org/hibernate/entitymanager/3.5/reference/en/html/listeners.html\" target=\"_blank\" rel=\"noopener noreferrer\">Hibernate</a>, <strong>Ruby</strong> with <a href=\"http://guides.rubyonrails.org/active_record_callbacks.html\" target=\"_blank\" rel=\"noopener noreferrer\">Active Record</a>, <strong>Meteor</strong> and its <a href=\"https://www.discovermeteor.com/blog/a-look-at-meteor-collection-hooks/\" target=\"_blank\" rel=\"noopener noreferrer\">Collection hooks</a>, and for all the homo erectus who are reading, also with some PHP frameworks, just to name a few.</p>\n<h2>Simplifying and DRYing out the code</h2>\n<p>The framework-agnostic recipe is the following:</p>\n<ul>\n<li><strong>Identify</strong> repeated code that perform some action after a change of state persisted on the database</li>\n<li><strong>Cut</strong> the previously identified code </li>\n<li><strong>Paste</strong> it in the model and override the lifecycle callback that make sense the most, as explained below</li>\n</ul>\n<p> In <a href=\"http://www.liftweb.net/\" target=\"_blank\" rel=\"noopener noreferrer\">Lift</a> we accomplish this with the LifecycleCallbacks <a href=\"http://docs.scala-lang.org/tutorials/tour/traits.html\" target=\"_blank\" rel=\"noopener noreferrer\">trait</a> that we can mix in the fields of our <a href=\"https://www.assembla.com/wiki/show/liftweb/Record\" target=\"_blank\" rel=\"noopener noreferrer\">record</a>, <a href=\"https://www.assembla.com/wiki/show/liftweb/Mongo_Record_Basics\" target=\"_blank\" rel=\"noopener noreferrer\">MongoRecord</a> in our case.\nThis trait make us available the following methods</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"> \n <span class=\"token keyword\">def</span> beforeValidation <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">def</span> afterValidation <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n \n <span class=\"token keyword\">def</span> beforeSave <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">def</span> beforeCreate <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">def</span> beforeUpdate <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">def</span> afterSave <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">def</span> afterCreate <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">def</span> afterUpdate <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n </code></pre></div>\n<p>that we can override in order to perform actions at various points during the lifecycle of a given instance. Their names are self explanatory but a thing to remember is that <code class=\"language-text\">beforeSave</code> is always called before <code class=\"language-text\">beforeCreate</code> or <code class=\"language-text\">beforeUpdate</code>.<br>\n<code class=\"language-text\">afterSave</code>, similarly, is called after <code class=\"language-text\">afterCreate</code> or <code class=\"language-text\">afterUpdate</code>.  </p>\n<p>With this tool in our toolbelt we can centralize the code that was spread all over the codebase, in our model, making our software more mantainable, <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>DRY</strong></a>, and clean.</p>\n<p>Here is an example</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"> <span class=\"token keyword\">class</span> ChatMsg <span class=\"token keyword\">extends</span> MongoRecord<span class=\"token punctuation\">[</span>ChatMsg<span class=\"token punctuation\">]</span> \n   <span class=\"token keyword\">with</span> ObjectIdPk<span class=\"token punctuation\">[</span>ChatMsg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">def</span> meta <span class=\"token operator\">=</span> ChatMsg\n     <span class=\"token keyword\">object</span> text <span class=\"token keyword\">extends</span> StringField<span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> \n       <span class=\"token keyword\">with</span> LifecycleCallbacks<span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> afterSave<span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token comment\">//send push notification or whatever</span>\n     <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Go and try it out!  </p>\n<p>Keep Learning.<br>\nUntil next time <img alt=\"emoji-sunglasses\" data-icon=\"emoji-sunglasses\" style=\"display: inline; margin: 0; margin-top: 1px; top: 5px; width: 25px\" src=\"data:image/png;base64, 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\" title=\"emoji-sunglasses\"></p>\n</article>","frontmatter":{"title":"Scala & Lift and the record lifecycle callbacks","date":"Feb 29, 2016"}}},"pageContext":{"slug":"/blog/scala-simplify-code-with-lifecycle-callbacks-model/","previous":null,"next":{"fields":{"slug":"/blog/isomorphic-web-applications-with-scala-and-scalajs/"},"frontmatter":{"title":"Isomorphic Web Applications with Scala and ScalaJs"}}}}}